<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>博客说明</title>
    <link href="/2050/12/31/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    <url>/2050/12/31/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p><strong>主要是更新学习笔记和一些感想。。。。</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图的遍历</title>
    <link href="/2020/10/19/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <url>/2020/10/19/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>从图中某一个顶点出发访遍图中其余顶点，且使每一个顶点仅被访问一次，这一过程就叫做<strong>图的遍历（Traversing Graph）</strong><br>有两种遍历方案：</p><ol><li>深度优先遍历（Depth First Search），又称为深度优先搜索，简称DFS。  </li><li>广度优先遍历（Breadth First Search）,又称为广度优先搜索，简称BFS。</li></ol><h1 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h1><p>深度优先搜索类似于树的先序遍历，具体过程如下：</p><p>1.从图中v0出发，访问v0。</p><p>2.找出v0的第一个未被访问的邻接点，访问该顶点。以该顶点为新顶点，重复此步骤，直至刚访问过的顶点没有未被访问的邻接点为止。</p><p>3.返回前一个访问过的仍有未被访问邻接点的顶点，继续访问该顶点的下一个未被访问领接点。</p><p>4.重复2,3步骤，直至所有顶点均被访问，搜索结束。</p><h2 id="使用邻接矩阵作为存储结构的代码"><a href="#使用邻接矩阵作为存储结构的代码" class="headerlink" title="使用邻接矩阵作为存储结构的代码"></a>使用邻接矩阵作为存储结构的代码</h2><p>图的存储结构见链接：<a href="https://lja2019.github.io/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/">图的存储结构</a></p><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 100</span><span class="hljs-built_in">_Bool</span> visited[MAX];     <span class="hljs-comment">// 访问标志的数组</span><span class="hljs-comment">/* 邻接矩阵的深度优先递归算法 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(MGraph G, <span class="hljs-keyword">int</span> i)</span> </span>&#123;    <span class="hljs-keyword">int</span> j;    visited[i] = <span class="hljs-number">1</span>;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, G.vexes[i]);  <span class="hljs-comment">// 遍历该结点的操作，也可以是其他操作</span>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G.numVertexes; ++j) &#123;        <span class="hljs-keyword">if</span> (G.arcs[i][j] == <span class="hljs-number">1</span> &amp;&amp; !visited[j])            DFS(G, j);      <span class="hljs-comment">// 对未访问的邻接顶点递归调用</span>    &#125;&#125;<span class="hljs-comment">/* 邻接矩阵的深度优先非递归算法 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS2</span><span class="hljs-params">(MGraph G, <span class="hljs-keyword">int</span> i)</span> </span>&#123;    <span class="hljs-keyword">int</span> <span class="hljs-built_in">stack</span>[MAXVEX];    <span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>;    <span class="hljs-keyword">int</span> j;    <span class="hljs-built_in">stack</span>[++top] = i;    <span class="hljs-keyword">while</span> (top != <span class="hljs-number">-1</span>) &#123;        <span class="hljs-keyword">int</span> k = <span class="hljs-built_in">stack</span>[top--];        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, G.vexes[k]);        visited[k] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G.numVertexes; ++j) &#123;            <span class="hljs-keyword">if</span> (G.arcs[i][j] == <span class="hljs-number">1</span> &amp;&amp; !visited[j])                <span class="hljs-built_in">stack</span>[++top] = j;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(MGraph G)</span> </span>&#123;    <span class="hljs-keyword">int</span> i;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; ++i)         visited[i] = <span class="hljs-number">0</span>;     <span class="hljs-comment">// 初始化所有顶点状态都是未访问过状态</span>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; ++i)        <span class="hljs-keyword">if</span> (!visited[i])    <span class="hljs-comment">// 对未访问过的顶点调用DFS，若是连通图，只会执行一次。</span>            DFS2(G, i);&#125;</code></pre><h2 id="使用邻接表作为存储结构的代码"><a href="#使用邻接表作为存储结构的代码" class="headerlink" title="使用邻接表作为存储结构的代码"></a>使用邻接表作为存储结构的代码</h2><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 100</span><span class="hljs-built_in">_Bool</span> visited[MAX];     <span class="hljs-comment">//访问标记的数组</span><span class="hljs-comment">/* 邻接表的深度优先递归算法 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(AdjListGraph G, <span class="hljs-keyword">int</span> i)</span> </span>&#123;    EdgeNode *p;    visited[i] = <span class="hljs-number">1</span>;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, G.adjList[i].data);   <span class="hljs-comment">// 遍历该结点的操作，也可以是其他操作</span>    p = G.adjList[i].firstedge;    <span class="hljs-keyword">while</span> (p) &#123;        <span class="hljs-keyword">if</span> (!visited[p-&gt;adjvex])            DFS(G, p-&gt;adjvex);        p = p-&gt;next;    &#125;&#125;<span class="hljs-comment">/* 邻接表的深度优先非递归算法 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS2</span><span class="hljs-params">(AdjListGraph G, <span class="hljs-keyword">int</span> i)</span> </span>&#123;    <span class="hljs-keyword">int</span> <span class="hljs-built_in">stack</span>[MAXVEX];    <span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>;    EdgeNode *p = G.adjList[i].firstedge;    <span class="hljs-built_in">stack</span>[++top] = i;    <span class="hljs-keyword">while</span> (top != <span class="hljs-number">-1</span>) &#123;        <span class="hljs-keyword">int</span> k = <span class="hljs-built_in">stack</span>[top--];        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, G.adjList[k].data);        visited[k] = <span class="hljs-number">1</span>;        p = G.adjList[k].firstedge;        <span class="hljs-keyword">while</span> (p) &#123;            <span class="hljs-keyword">if</span> (!visited[p-&gt;adjvex])                <span class="hljs-built_in">stack</span>[++top] = p-&gt;adjvex;            p = p-&gt;next;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(AdjListGraph G)</span> </span>&#123;    <span class="hljs-keyword">int</span> i;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; ++i)        visited[i] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化所有顶点状态都是未访问过状态</span>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.numVertexes; ++i)        <span class="hljs-keyword">if</span> (!visited[i])            DFS2(G, i);&#125;s</code></pre><h1 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h1>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图的存储结构</title>
    <link href="/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
    <url>/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="邻接矩阵（Adjacency-Matrix）"><a href="#邻接矩阵（Adjacency-Matrix）" class="headerlink" title="邻接矩阵（Adjacency Matrix）"></a>邻接矩阵（Adjacency Matrix）</h1><p>图的邻接矩阵存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息。<br>特点：</p><ol><li>邻接矩阵对角线上的值均为0；</li><li>无向图的邻接矩阵是对称的，顶点的度等于该顶点对应行或列的和；</li><li>有向图顶点的入度为顶点对应列的和，出度为顶点对应行的和。<br>每条边上带有权的图称为<strong>网</strong>。对于网，当两点间边不存在时，邻接矩阵中的值为<strong>∞</strong>。  </li></ol><p>无向图：</p><div align="center"><img src="/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/1.png" width="50%" height="50%">   </div><p>有向图：</p><div align="center"><img src="/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/2.png" width="50%" height="50%">   </div><pre><code class="hljs C++"><span class="hljs-comment">/* 邻接矩阵 */</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> VertexType;    <span class="hljs-comment">// 顶点类型</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> EdgeType;   <span class="hljs-comment">// 边上权值的类型</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXVEX 100  <span class="hljs-comment">//最大顶点数</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INFINITY 65535  <span class="hljs-comment">// 用65535来代表∞</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    VertexType vexes[MAXVEX];    <span class="hljs-comment">// 顶点表</span>    EdgeType arcs[MAXVEX][MAXVEX];   <span class="hljs-comment">// 邻接矩阵</span>    <span class="hljs-keyword">int</span> numVertexes, numEdges;  <span class="hljs-comment">// 图中当前的顶点数和边数</span>&#125;MGraph;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph *G)</span> </span>&#123;    <span class="hljs-keyword">int</span> i, j, k, w;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点数和边数：\n&quot;</span>);    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges);  <span class="hljs-comment">// 输入图的顶点数和边数</span>    getchar();    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G-&gt;numVertexes; ++i) &#123;   <span class="hljs-comment">// 输入顶点信息，建立顶点表</span>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;G-&gt;vexes[i]);        getchar();    &#125;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G-&gt;numVertexes; ++i)        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G-&gt;numVertexes; ++j)            G-&gt;arcs[i][j] = INFINITY;    <span class="hljs-comment">// 邻接矩阵初始化</span>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; G-&gt;numEdges; ++k) &#123;   <span class="hljs-comment">// 读入边，建立邻接矩阵</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入边(vi,vj)上的下标i,下标j和权值w：\n&quot;</span>);        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d,%d&quot;</span>, &amp;i, &amp;j, &amp;w);  <span class="hljs-comment">// 输入边(vi,vj)上的权w</span>        G-&gt;arcs[i][j] = w;        G-&gt;arcs[j][i] = G-&gt;arcs[i][j];    <span class="hljs-comment">// 对于无向图，矩阵对称</span>    &#125;&#125;<span class="hljs-comment">//如果边不带权值，则邻接矩阵元素的值初始化为0。</span></code></pre><h1 id="邻接表（Adjacency-List）"><a href="#邻接表（Adjacency-List）" class="headerlink" title="邻接表（Adjacency List）"></a>邻接表（Adjacency List）</h1><p>邻接矩阵存在一个缺点：对于边数相对顶点数较少的图，邻接矩阵会浪费大量的存储空间。  使用邻接表，对边或弧使用链式存储的方式可以避免空间浪费。<br>邻接矩阵存储空间浪费的情况：</p><div align="center"><img src="/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/3.png" width="50%" height="50%">   </div>无向图的邻接表：<div align="center"><img src="/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/4.png" width="50%" height="50%">   </div>对于有向图，根据存储的边表不同，分为邻接表和逆邻接表。存储出边的是邻接表。  <p>有向图的邻接表和逆邻接表：</p><div align="center"><img src="/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/5.png" width="50%" height="50%">   </div>对于带权值的网，可以在边表中再增加一个weight的数据域。<pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> VertexType;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> EdgeType;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXVEX 100</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> &#123;</span>    <span class="hljs-keyword">int</span> adjvex;     <span class="hljs-comment">// 该顶点对应的下标</span>    <span class="hljs-comment">// EdgeType weight;  //如果是网则有权重</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> *<span class="hljs-title">next</span>;</span>&#125; EdgeNode;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VertexNode</span> &#123;</span>    VertexType data;    EdgeNode *firstedge;&#125; VertexNode, AdjList[MAXVEX];<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    AdjList adjList;      <span class="hljs-keyword">int</span> numVertexes, numEdges; &#125; AdjListGraph;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateALGraph</span><span class="hljs-params">(AdjListGraph *G)</span> </span>&#123;    <span class="hljs-keyword">int</span> i, j, k;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点数和边数，用\&quot;,\&quot;分隔\n&quot;</span>);    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点信息\n&quot;</span>);    getchar();    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G-&gt;numVertexes; ++i) &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;G-&gt;adjList[i].data);        getchar();        G-&gt;adjList[i].firstedge = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">// 边表置为空</span>    &#125;        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; G-&gt;numEdges; ++k) &#123;     <span class="hljs-comment">// 建立边表信息</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入边(vi,vj)上的顶点号，用\&quot;,\&quot;分隔：\n&quot;</span>);        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, &amp;i, &amp;j);        EdgeNode *e = (EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));        e-&gt;adjvex = j;      <span class="hljs-comment">// 邻接点在顶点表中的下标</span>        e-&gt;next = G-&gt;adjList[i].firstedge;    <span class="hljs-comment">// 头插法将邻接点插入边表</span>        G-&gt;adjList[i].firstedge = e;        e = (EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));    <span class="hljs-comment">// 无向图</span>        e-&gt;adjvex = i;        e-&gt;next = G-&gt;adjList[j].firstedge;        G-&gt;adjList[j].firstedge = e;    &#125;&#125;<span class="hljs-comment">// 对于有向图 有 邻接表 和 逆邻接表；邻接表的缺点是想了解入度必须遍历整个图</span><span class="hljs-comment">// 逆邻接表缺点是想了解 出度 必须遍历整个图</span></code></pre><h1 id="十字链表（Orthogonal-List）"><a href="#十字链表（Orthogonal-List）" class="headerlink" title="十字链表（Orthogonal List）"></a>十字链表（Orthogonal List）</h1><p>对于有向图来说，邻接表是有缺陷的。关心了出度问题，想了解入度就必须要遍历整个图才能知道，而逆邻接表解决了入度却不了解出度的情况。<br>十字链表能把邻接表和逆邻接表结合起来。<br>十字链表的顶点表结构如下图所示：</p><div align="center"><img src="/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/6.png" width="50%" height="50%">   </div>firstin表示入边表头指针，指向该顶点的入边表中第一个结点，firstout表示出边表头指针，指向该顶点的出边表中的第一个结点。边表结点结构如下图所示：<div align="center"><img src="/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/7.png" width="50%" height="50%">   </div>tailvex是弧起点在顶点表的下标，headvex是弧终点在顶点表中的下标。headlink是入边表指针域，指向重点相同的下一条边；taillink是出边表指针域，指向起点相同的下一条边。如果是网，还可以增加一个weight域来存储权值。<pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXVEX 100</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> VertexType;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> EdgeType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> &#123;</span>    <span class="hljs-keyword">int</span> tailvex;    <span class="hljs-comment">// 弧起点在顶点表中的下标</span>    <span class="hljs-keyword">int</span> headvex;    <span class="hljs-comment">// 弧终点在顶点表中的下标</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> *<span class="hljs-title">headlink</span>;</span>  <span class="hljs-comment">// 入边表指针域</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EdgeNode</span> *<span class="hljs-title">taillink</span>;</span>  <span class="hljs-comment">// 出边表指针域</span>&#125; EdgeNode;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VertexNode</span> &#123;</span>    VertexType data;    EdgeNode *firstin, *firstout; <span class="hljs-comment">// firstin指向该顶点的入边表第一个结点；firstout指向出边表第一个结点</span>&#125; VertexNode, OrthList[MAXVEX];<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    OrthList orthList;    <span class="hljs-keyword">int</span> numVertexes, numEdges;&#125; OrthListGraph;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateOLGraph</span><span class="hljs-params">(OrthListGraph *G)</span> </span>&#123;    <span class="hljs-keyword">int</span> i, j, k;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点数和边数，用\&quot;,\&quot;分隔\n&quot;</span>);    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点信息\n&quot;</span>);    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G-&gt;numVertexes; ++i) &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;G-&gt;orthList[i].data);        G-&gt;orthList[i].firstin = G-&gt;orthList[i].firstout = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">// 边表置为空</span>    &#125;    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; G-&gt;numEdges; ++k) &#123;     <span class="hljs-comment">// 建立出边表和入边表信息</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入边(vi,vj)上的顶点号，用\&quot;,\&quot;分隔：\n&quot;</span>);        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, &amp;i, &amp;j);        EdgeNode *e = (EdgeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(EdgeNode));        e-&gt;tailvex = i;        e-&gt;headvex = j;        e-&gt;taillink = G-&gt;orthList[i].firstout;        G-&gt;orthList[i].firstout = e-&gt;taillink;        e-&gt;headlink = G-&gt;orthList[j].firstin;        G-&gt;orthList[j].firstin = e-&gt;headlink;    &#125;        &#125;</code></pre><h1 id="邻接多重表（Adjacent-MultiList）"><a href="#邻接多重表（Adjacent-MultiList）" class="headerlink" title="邻接多重表（Adjacent MultiList）"></a>邻接多重表（Adjacent MultiList）</h1><p>如果在无向图的应用中，关注的重点是顶点，那么邻接表是不错的选择。但如果更关注边的操作，比如对已访问过的边做标记，删除某一条边等操作，邻接表需要找到这条边的两个边表结点进行操作，这是比较麻烦的。可以对表结点的结构进行改造，重新定义边表结构如下图所示：</p><div align="center"><img src="/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/8.png" width="50%" height="50%">   </div>其中ivex和jvex是与某条边依附的两个顶点在顶点表中的下标。ilink指向依附顶点ivex的下一条边，jlink指向依附顶点jvex的下一条边。这就是邻接多重表结构。<p>邻接多重表的例子：</p><div align="center"><img src="/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/9.png" width="50%" height="50%">   </div><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXVEX 100</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> VertexType;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> EdgeType;<span class="hljs-built_in">_Bool</span> Visited;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span>    <span class="hljs-comment">// Visited visited; //当需要标记是否访问时使用</span>    <span class="hljs-comment">// EdgeType weight; //当边需要权重时使用</span>    <span class="hljs-keyword">int</span> ivex, jvex;     <span class="hljs-comment">// 该边依附的两个顶点在顶点表中的下标</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> *<span class="hljs-title">ilink</span>, *<span class="hljs-title">jlink</span>;</span>&#125; Edge;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vextex</span> &#123;</span>    VertexType data;    Edge *firstedge; <span class="hljs-comment">//指向第一条依附该顶点的边</span>&#125; Vertex, AdjMuList[MAXVEX];<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>    AdjMuList adjMuList;    <span class="hljs-keyword">int</span> numEdges, numVertexes;&#125; AMLGraph;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateVex</span><span class="hljs-params">(AMLGraph *G, VertexType v)</span> </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G-&gt;numVertex; ++i) &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(G-&gt;adjMuList[i].data, v) == <span class="hljs-number">0</span>)            <span class="hljs-keyword">return</span> i;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateAMLGraph</span><span class="hljs-params">(AMLGraph *G)</span> </span>&#123;    <span class="hljs-keyword">int</span> i, j, k;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点数和边数，用\&quot;,\&quot;分隔\n&quot;</span>);    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点信息\n&quot;</span>);    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G-&gt;numVertexes; ++i) &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;G-&gt;adjMuList[i].data);        G-&gt;adjMuList[i].firstedge = <span class="hljs-literal">NULL</span>;    &#125;    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; G-&gt;numEdges; ++k) &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入边(vi,vj)，用\&quot;,\&quot;分隔：\n&quot;</span>);        VertexType v1, v2;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c,%c&quot;</span>, &amp;v1, &amp;v2);        i = LocateVex(G, v1);        j = LocateVex(G, v2);        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span>) &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找不到边或结点\n&quot;</span>);            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);        &#125;        Edge *e = (Edge*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Edge));        <span class="hljs-keyword">if</span> (!e)            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);        e-&gt;ivex = i;    <span class="hljs-comment">// 对边结点赋值</span>        e-&gt;jvex = j;        <span class="hljs-comment">// e-&gt;visited = 0;</span>        e-&gt;ilink = G-&gt;adjMuList[i].firstedge;   <span class="hljs-comment">// 头插法</span>        e-&gt;jlink = G-&gt;adjMuList[j].firstedge;        G-&gt;adjMuList[i].firstedge = G-&gt;adjMuList[j].firstedge = e;    &#125;&#125;</code></pre><h1 id="边集数组（Edgeset-Array）"><a href="#边集数组（Edgeset-Array）" class="headerlink" title="边集数组（Edgeset Array）"></a>边集数组（Edgeset Array）</h1><p>边集数组时利用一维数组存储图中所有边的一种图的表示方法。边集数组由两个一维数组构成，一个是存储顶点的信息，另一个是存储边的信息。边数组每个数据元素由一条边的起点下标（begin），终点下标（end）和权（weight）组成。<br><strong>边集数组适合那些对边依次进行处理的运算，不适合对顶点，或者对特定边的运算。</strong><br>边集数组例子：</p><div align="center"><img src="/2020/10/16/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/9.png" width="50%" height="50%">   </div><p><strong>克鲁斯卡尔算法中要应用到边集数组这一数据结构</strong></p><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXVEX 100</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXEDGE 200</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> VertexType;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> EdgeType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edges</span> &#123;</span>    <span class="hljs-keyword">int</span> begin, end;    EdgeType weight;&#125; Edges;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Graph</span> &#123;</span>    VertexType vexs[MAXVEX];    <span class="hljs-comment">// 顶点数组</span>    Edges edges[MAXEDGE];    <span class="hljs-keyword">int</span> numVertexes, numEdges;&#125; ESAGraph;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateESAGraph</span><span class="hljs-params">(ESAGraph *G)</span> </span>&#123;    <span class="hljs-keyword">int</span> i, j, k, w;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点数和边数，用\&quot;,\&quot;分隔\n&quot;</span>);    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d&quot;</span>, &amp;G-&gt;numVertexes, &amp;G-&gt;numEdges);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入顶点信息\n&quot;</span>);    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G-&gt;numVertexes; ++i) &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;G-&gt;vexs[i]);    &#125;    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; G-&gt;numEdges; ++k) &#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入边(vi,vj)上的下标i，下标j和权w：\n&quot;</span>);        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d,%d,%d&quot;</span>, &amp;i, &amp;j, &amp;w);        G-&gt;edges[k].begin = i;        G-&gt;edges[k].end = j;        G-&gt;edges[k].weight = w;    &#125;&#125;</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>邻接矩阵</strong>用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息。但是边稀疏的图，邻接矩阵会浪费很多存储空间。使用<strong>邻接表</strong>解决了这一问题。但是对于有向图，邻接表求一个顶点的入度需要遍历整个表，而逆邻接表求一个顶点的出度需要遍历整个表。对于有向图使用<strong>十字链表</strong>可以解决这一问题。十字链表的顶点表中的结点有两个指针，分别指向该顶点的出边表和入边表。当一个无向图更关心边，需要增加或者删除边的时候，使用邻接表需要找到该边的两个结点进行操作。使用<strong>邻接多重表</strong>可以解决这一问题。邻接多重表的边表进行了改进，每个边结点存了该边依附的两个顶点在顶点表中的下标，而且边结点中有两个指针，分别连接与这两个顶点关联的边结点，因此可以通过这两个指针找到与一个结点关联的所有边。<br>当只需要对边进行操作，可以使用<strong>边集数组</strong>。边集数组中查找一个顶点的度需要扫描整个边数组，效率低，因此更适合对边依次进行处理的操作，而不适合对顶点相关的操作。边集数组也适合表示稀疏图。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树遍历的非递归算法</title>
    <link href="/2020/10/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
    <url>/2020/10/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="先序遍历代码实现"><a href="#先序遍历代码实现" class="headerlink" title="先序遍历代码实现"></a>先序遍历代码实现</h1><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span>&#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">left</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">right</span>;</span>&#125; BTNode, *BTree;<span class="hljs-comment">/* 扩展二叉树按前序创建一棵二叉树 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preOrderBuildTree</span><span class="hljs-params">(BTree *t)</span> </span>&#123;    <span class="hljs-keyword">char</span> ch;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;ch);    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;#&#x27;</span>)        *t = <span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">else</span> &#123;        *t = (BTNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));        (*t)-&gt;data = ch;        preOrderBuildTree(&amp;((*t)-&gt;left));        preOrderBuildTree(&amp;((*t)-&gt;right));    &#125;&#125;<span class="hljs-comment">/* 非递归前序遍历 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(BTree T)</span> </span>&#123;    <span class="hljs-keyword">if</span> (!T)        <span class="hljs-keyword">return</span>;    BTNode *<span class="hljs-built_in">stack</span>[<span class="hljs-number">100</span>];    <span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>;    BTNode *p = T;    <span class="hljs-keyword">while</span> (top != <span class="hljs-number">-1</span> || p) &#123;        <span class="hljs-comment">/* 等效代码</span><span class="hljs-comment">        if (p) &#123;</span><span class="hljs-comment">            printf(&quot;%c &quot;, p-data);</span><span class="hljs-comment">            stack[++top] = p;</span><span class="hljs-comment">            p = p-&gt;left</span><span class="hljs-comment">        &#125; else &#123;</span><span class="hljs-comment">            p = stack[top--];</span><span class="hljs-comment">            p = p-&gt;right;</span><span class="hljs-comment">        &#125;</span><span class="hljs-comment">         */</span>        <span class="hljs-keyword">while</span> (p) &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, p-&gt;data);            <span class="hljs-built_in">stack</span>[++top] = p;            p = p-&gt;left;        &#125;        <span class="hljs-keyword">if</span> (top != <span class="hljs-number">-1</span>) &#123;    <span class="hljs-comment">// 可以不必判断栈空</span>            p = <span class="hljs-built_in">stack</span>[top--];            p = p-&gt;right;        &#125;    &#125;&#125;<span class="hljs-comment">/* 另一种方法 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preOrder2</span><span class="hljs-params">(BTree T)</span> </span>&#123;    <span class="hljs-keyword">if</span> (!T)        <span class="hljs-keyword">return</span>;    BTNode *<span class="hljs-built_in">stack</span>[<span class="hljs-number">100</span>];    <span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>;    <span class="hljs-built_in">stack</span>[++top] = T;    <span class="hljs-keyword">while</span> (top != <span class="hljs-number">-1</span>) &#123;        BTNode *p = <span class="hljs-built_in">stack</span>[top--];        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;%c &quot;</span>, p-&gt;data);        <span class="hljs-keyword">if</span> (p-&gt;right)               <span class="hljs-comment">// 压栈先压右子结点</span>            <span class="hljs-built_in">stack</span>[++top] = p-&gt;right;        <span class="hljs-keyword">if</span> (p-&gt;left)            <span class="hljs-built_in">stack</span>[++top] = p-&gt;left;    &#125;&#125;</code></pre><h1 id="中序遍历代码实现"><a href="#中序遍历代码实现" class="headerlink" title="中序遍历代码实现"></a>中序遍历代码实现</h1><pre><code class="hljs C++"><span class="hljs-comment">/* 非递归中序遍历 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(BTree T)</span> </span>&#123;    <span class="hljs-keyword">if</span> (!T)        <span class="hljs-keyword">return</span>;    BTNode *<span class="hljs-built_in">stack</span>[<span class="hljs-number">100</span>]; <span class="hljs-comment">//用于保存双亲结点</span>    <span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>;    BTNode *p = T;    <span class="hljs-keyword">while</span> (top != <span class="hljs-number">-1</span> || p) &#123;        <span class="hljs-comment">/* 等效代码</span><span class="hljs-comment">        while (p) &#123;</span><span class="hljs-comment">            stack[++top] = p;</span><span class="hljs-comment">            p = p-&gt;left;</span><span class="hljs-comment">        &#125;</span><span class="hljs-comment">        if (top != -1) &#123;    // 栈非空，其实可以不必判断</span><span class="hljs-comment">            p = stack[top--];</span><span class="hljs-comment">            printf(&quot;%c &quot;, p-&gt;data);</span><span class="hljs-comment">            p = p-&gt;right;</span><span class="hljs-comment">        &#125;</span><span class="hljs-comment">         */</span>        <span class="hljs-keyword">if</span> (p) &#123;            <span class="hljs-built_in">stack</span>[++top] = p;            p = p-&gt;left;        &#125; <span class="hljs-keyword">else</span> &#123;            p = <span class="hljs-built_in">stack</span>[top--];            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, p-&gt;data);            p = p-&gt;right;        &#125;    &#125;&#125;</code></pre><h1 id="后序遍历代码实现"><a href="#后序遍历代码实现" class="headerlink" title="后序遍历代码实现"></a>后序遍历代码实现</h1><p>后序遍历的难点在于：<strong>需要判断上次访问的结点是位于左子树，还是右子树</strong>。若是位于左子树，则需跳过根节点，先进入右子树，再回头访问根节点；若是位于右子树，则直接访问根节点。</p><pre><code class="hljs C++"><span class="hljs-comment">/* 非递归后序遍历 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">(BTree T)</span> </span>&#123;    <span class="hljs-keyword">if</span> (!T)        <span class="hljs-keyword">return</span>;    BTNode *<span class="hljs-built_in">stack</span>[<span class="hljs-number">100</span>];    <span class="hljs-keyword">int</span> top = <span class="hljs-number">-1</span>;    <span class="hljs-built_in">stack</span>[++top] = T;    BTNode *cur = T, *pre = <span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">while</span> (top != <span class="hljs-number">-1</span>) &#123;        <span class="hljs-keyword">while</span> (cur) &#123;            cur = cur-&gt;left;            <span class="hljs-keyword">if</span> (cur)                <span class="hljs-built_in">stack</span>[++top] = cur;        &#125;        cur = <span class="hljs-built_in">stack</span>[top];        <span class="hljs-keyword">if</span> (cur-&gt;right == <span class="hljs-literal">NULL</span> || pre == cur-&gt;right) &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, cur-&gt;data);            --top;            pre = cur;            cur = <span class="hljs-literal">NULL</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-built_in">stack</span>[++top] = cur-&gt;right;            cur = cur-&gt;right;        &#125;    &#125;&#125;</code></pre><h1 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h1><pre><code class="hljs C++"><span class="hljs-comment">/* 层序遍历 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">leverOrder</span><span class="hljs-params">(BTree T)</span> </span>&#123;    <span class="hljs-keyword">if</span> (!T)        <span class="hljs-keyword">return</span>;    BTNode *<span class="hljs-built_in">queue</span>[<span class="hljs-number">100</span>];    <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>, rear = <span class="hljs-number">0</span>; <span class="hljs-comment">// front为队首，rear为队尾</span>    <span class="hljs-built_in">queue</span>[rear] = T;    rear = (rear+<span class="hljs-number">1</span>) % <span class="hljs-number">100</span>;    <span class="hljs-keyword">while</span> (rear != front) &#123;        BTNode *p = <span class="hljs-built_in">queue</span>[front];        front = (front + <span class="hljs-number">1</span>) % <span class="hljs-number">100</span>;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, p-&gt;data);        <span class="hljs-keyword">if</span> (p-&gt;left) &#123;            <span class="hljs-built_in">queue</span>[rear] = p-&gt;left;            rear = (rear+<span class="hljs-number">1</span>) % <span class="hljs-number">100</span>;        &#125;        <span class="hljs-keyword">if</span> (p-&gt;right) &#123;            <span class="hljs-built_in">queue</span>[rear] = p-&gt;right;            rear = (rear+<span class="hljs-number">1</span>) % <span class="hljs-number">100</span>;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线索二叉树详解</title>
    <link href="/2020/10/14/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/10/14/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么需要遍历"><a href="#为什么需要遍历" class="headerlink" title="为什么需要遍历"></a>为什么需要遍历</h1><p> <strong>遍历</strong>本质上是将一个复杂的非线性结构转换为线性结构，使每一个结点都有了唯一的前驱和后继（第一个结点无前驱，最后一个结点无后继）。</p> <a id="more"></a><h1 id="什么是线索二叉树"><a href="#什么是线索二叉树" class="headerlink" title="什么是线索二叉树"></a>什么是线索二叉树</h1><p>对于具有n个结点的二叉树，在二叉链式存储结构中有n+1个空链域，利用这些空链域存放在某种遍历次序下该结点的前驱结点和后继结点，这些指针称为线索，加上线索的二叉树称为线索二叉树。</p><h1 id="线索二叉树的结构"><a href="#线索二叉树的结构" class="headerlink" title="线索二叉树的结构"></a>线索二叉树的结构</h1><p>当结点的左孩子为空，把这个空域的指针改为指向该结点的前驱；当结点的右孩子为空，把这个空域的指针改为指向该结点的后继。显然，需要一个标志位ltag标志该域指向的是左孩子还是前驱，需要一个标志位rtag标志该域指向的是右孩子还是后继。ltag和rtag的作用是区别线索指针和孩子指针。<br><img src="/2020/10/14/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3/1.png" width="70%" height="70%"></p><h1 id="线索二叉树的作用"><a href="#线索二叉树的作用" class="headerlink" title="线索二叉树的作用"></a>线索二叉树的作用</h1><p>对于二叉树的一个结点，查找其左右子女是方便的，其前驱和后继只有在遍历中得到。为了容易找到前驱和后继，有两种方法。一种是在结点结构中增加前向和后向的指针，这种方法增加了存储开销，不可取；更好的方法是利用二叉树的空链域。</p><h1 id="三种线索二叉树及区别"><a href="#三种线索二叉树及区别" class="headerlink" title="三种线索二叉树及区别"></a>三种线索二叉树及区别</h1><h2 id="先序线索二叉树"><a href="#先序线索二叉树" class="headerlink" title="先序线索二叉树"></a>先序线索二叉树</h2><p>在先序线索二叉树中查找结点的后继较容易，而查找结点的前驱要知道其双亲的信息。保存双亲的信息需要使用栈。</p><h2 id="后序线索二叉树"><a href="#后序线索二叉树" class="headerlink" title="后序线索二叉树"></a>后序线索二叉树</h2><p>在后序线索二叉树中查找结点<em>p的前驱：若结点</em>p无左子树，则p-&gt;lchild指向其前驱；否则，若结点<em>p有左子树，当其右子树为空时，其左子树的根（即p-&gt;lrchild）为其后序前驱。当其右子树非空时，其右子树的根（即p-&gt;rchild）为其后序前驱。<br>在后序线索二叉树中查找结点</em>p的后继：若结点<em>p为根，则无后继；若结点</em>p为其双亲的右孩子，则其后继为其双亲；若结点<em>p为其双亲的左孩子，且双亲无右子女，则其后继为其双亲；若结点</em>p为其双亲的左孩子，且双亲有右子女，则结点*p的后继是其双亲的右子树中按后序遍历的第一个结点。所以，求后序线索二叉树中结点的后继要知道其双亲的信息，要使用栈。</p><h2 id="中序线索二叉树"><a href="#中序线索二叉树" class="headerlink" title="中序线索二叉树"></a>中序线索二叉树</h2><p>先序线索二叉树查找结点的前驱，后序线索二叉树查找结点的后继都需要利用到双亲的信息，所以必须用栈保存结点的双亲信息，所以说这两种线索二叉树是不完整的。<br>而中序线索二叉树，查找前驱和后继都不需要使用栈。<br><img src="/2020/10/14/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3/2.png" width="70%" height="70%"></p><h1 id="线索二叉树的优点"><a href="#线索二叉树的优点" class="headerlink" title="线索二叉树的优点"></a>线索二叉树的优点</h1><p>优点：  </p><ol><li>利用线索二叉树进行中序遍历时，不必采用堆栈处理，速度较一般二叉树的遍历速度快，且节约存储空间；</li></ol><p>缺点：</p><ol><li>结点的插入和删除比较麻烦</li></ol><h1 id="线索二叉树的应用"><a href="#线索二叉树的应用" class="headerlink" title="线索二叉树的应用"></a>线索二叉树的应用</h1><p>当路由器使用CIDR，选择下一跳的时候，或者转发分组的时候，通常会用<strong>最长前缀匹配（最佳匹配）</strong>来得到路由表的一行数据，为了更加有效的查找最长前缀匹配，使用了一种层次的数据结构中，通常使用的数据结构为二叉线索。</p><h1 id="中序线索二叉树相关代码"><a href="#中序线索二叉树相关代码" class="headerlink" title="中序线索二叉树相关代码"></a>中序线索二叉树相关代码</h1><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">trBTNode</span> &#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">trBTNode</span> *<span class="hljs-title">left</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">trBTNode</span> *<span class="hljs-title">right</span>;</span>    <span class="hljs-built_in">_Bool</span> ltag, rtag;&#125; trBTNode, *trBTree;trBTree pre; <span class="hljs-comment">//用于保存前驱</span><span class="hljs-comment">/* 扩展二叉树按前序创建一棵线索二叉树 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createInTree</span><span class="hljs-params">(trBTree *t)</span> </span>&#123;    <span class="hljs-keyword">char</span> ch;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;ch);    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;#&#x27;</span>)        *t = <span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">else</span> &#123;        *t = (trBTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(trBTNode));        (*t)-&gt;data = ch;        (*t)-&gt;ltag = <span class="hljs-number">0</span>;        (*t)-&gt;rtag = <span class="hljs-number">0</span>;        createInTree(&amp;((*t)-&gt;left));        createInTree(&amp;((*t)-&gt;right));    &#125;&#125;<span class="hljs-comment">/* 线索化 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InThreading</span><span class="hljs-params">(trBTree T)</span> </span>&#123;    <span class="hljs-keyword">if</span> (!T)        <span class="hljs-keyword">return</span>;    InThreading(T-&gt;left);    <span class="hljs-keyword">if</span> (T-&gt;left == <span class="hljs-literal">NULL</span>) &#123;        T-&gt;ltag = <span class="hljs-number">1</span>;        T-&gt;left = pre;    &#125;     <span class="hljs-keyword">if</span> (pre-&gt;right == <span class="hljs-literal">NULL</span>) &#123;            <span class="hljs-comment">//最开始的pre是 head， right指向自身</span>        pre-&gt;rtag = <span class="hljs-number">1</span>;        pre-&gt;right = T;    &#125;    pre = T;    InThreading(T-&gt;right);&#125; <span class="hljs-comment">/* 构建线索二叉树，增加头结点 */</span><span class="hljs-function">trBTree <span class="hljs-title">createInThread</span><span class="hljs-params">(trBTree T)</span> </span>&#123;    trBTree head = (trBTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(trBTNode));           <span class="hljs-comment">//创建一个 head结点</span>    head-&gt;ltag = <span class="hljs-number">0</span>;    head-&gt;rtag = <span class="hljs-number">1</span>;    head-&gt;right = head;    <span class="hljs-keyword">if</span> (!T)        head-&gt;left = head;    <span class="hljs-keyword">else</span> &#123;        head-&gt;left = T;        pre = head;        InThreading(T);        pre-&gt;right = head;          <span class="hljs-comment">//最后一个结点没有后继，它的 right指针 指向  head</span>        pre-&gt;rtag = <span class="hljs-number">1</span>;        head-&gt;right = pre;          <span class="hljs-comment">//  head  的 right 指向 最后一个 结点</span>    &#125;    <span class="hljs-keyword">return</span> head;        <span class="hljs-comment">// head的left指向二叉树的根结点，head的right指向中序遍历的最后一个结点</span>&#125;<span class="hljs-comment">/* 遍历线索二叉树，时间复杂度O(n) */</span><span class="hljs-function"><span class="hljs-built_in">_Bool</span> <span class="hljs-title">InOrderTraverseThr</span><span class="hljs-params">(trBTree head)</span> </span>&#123;    trBTNode *p = head-&gt;left;   <span class="hljs-comment">//  从树根开始遍历</span>    <span class="hljs-keyword">while</span> (p != head) &#123;        <span class="hljs-keyword">while</span> (p-&gt;ltag == <span class="hljs-number">0</span>) &#123;            p = p-&gt;left;        &#125;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, p-&gt;data);        <span class="hljs-keyword">while</span> (p-&gt;rtag == <span class="hljs-number">1</span> &amp;&amp; p-&gt;right != head) &#123;            p = p-&gt;right;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, p-&gt;data);        &#125;        p = p-&gt;right;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">/* 寻找结点的前驱 */</span><span class="hljs-function">trBTNode* <span class="hljs-title">InOrderPre</span><span class="hljs-params">(trBTNode *p)</span> </span>&#123;    <span class="hljs-keyword">if</span> (p-&gt;ltag == <span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span> p-&gt;left;    p = p-&gt;left;        <span class="hljs-comment">//  查找左子树最后一个结点</span>    <span class="hljs-keyword">while</span> (p-&gt;rtag == <span class="hljs-number">0</span>) &#123;        p = p-&gt;right;    &#125;    <span class="hljs-keyword">return</span> p;&#125;<span class="hljs-comment">/* 寻找结点的后继 */</span><span class="hljs-function">trBTNode* <span class="hljs-title">InOrderNext</span><span class="hljs-params">(trBTNode *p)</span> </span>&#123;    <span class="hljs-keyword">if</span> (p-&gt;rtag == <span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span> p-&gt;right;    p = p-&gt;right;    <span class="hljs-keyword">while</span> (p-&gt;ltag == <span class="hljs-number">0</span>) &#123;        p = p-&gt;left;    &#125;    <span class="hljs-keyword">return</span> p;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>根据遍历序列重建二叉树</title>
    <link href="/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树的两个性质"><a href="#二叉树的两个性质" class="headerlink" title="二叉树的两个性质"></a>二叉树的两个性质</h1><ol><li>已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树</li><li>已知后序遍历序列和中序遍历序列，可以唯一确定一棵二叉树  </li></ol><p><strong>注意：</strong> 由前序和后序无法确定一棵二叉树。因为只能确定根，而无法确定左右子树。  </p><a id="more"></a><p>如下图所示，前序序列是 <em>ABC</em>，后序序列是 <em>CBA</em>，可以确定A一定是根结点，但是无法确定哪个结点是左子树，哪个是右子树。<br><img src="/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/1.png" width="60%" height="60%"></p><h1 id="根据前序和中序构建一个二叉树的例子"><a href="#根据前序和中序构建一个二叉树的例子" class="headerlink" title="根据前序和中序构建一个二叉树的例子"></a>根据前序和中序构建一个二叉树的例子</h1><p>已知一棵二叉树的前序遍历为 <em>ABCDEF</em>，中序遍历为 <em>CBAEDF</em>，怎样来确定这棵二叉树。<br>步骤：  </p><ol><li>根据前序遍历，可知A是根结点；</li><li>根据中序遍历，可知CB和EDF分别是根A的左右子树；</li><li>对于CB，根据前序遍历确定B是左子树的根节点，根据中序遍历确定C是B的左孩子；</li><li>对于EDF，根据前序遍历确定D是右子树的根节点，根据中序遍历确定EF分别为D的左右孩子。</li></ol><div align="center"><img src="/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/2.png" width="40%" height="40%"></div><div align="center"><img src="/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/3.png" width="30%" height="30%"></div><div align="center"><img src="/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/4.png" width="30%" height="30%"></div><h1 id="根据前序和中序构建二叉树的代码实现"><a href="#根据前序和中序构建二叉树的代码实现" class="headerlink" title="根据前序和中序构建二叉树的代码实现"></a>根据前序和中序构建二叉树的代码实现</h1><h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><p>思路：<br>在前序序列中确定二叉树的根节点，然后通过确定左右子树的根节点的方式递归地构建左右子树。要注意递归边界。  </p><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> &#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">left</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">right</span>;</span>&#125; BTNode, *BTree;<span class="hljs-comment">/* 根据前序遍历次序和中序遍历次序构造一棵二叉树 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createTree</span><span class="hljs-params">(<span class="hljs-keyword">char</span> pre[], <span class="hljs-keyword">char</span> in[], <span class="hljs-keyword">int</span> preL, <span class="hljs-keyword">int</span> preR, <span class="hljs-keyword">int</span> inL, <span class="hljs-keyword">int</span> inR, BTree *t)</span> </span>&#123;    <span class="hljs-comment">// pre[] in[] 分别为前序和中序序列， preL和preR表示子树对应的前序序列的端点，inL和inR同理</span>    <span class="hljs-keyword">if</span> (preL &gt; preR)  <span class="hljs-comment">//递归边界</span>        <span class="hljs-keyword">return</span>;    *t = (BTNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));    (*t)-&gt;data = pre[preL];    <span class="hljs-keyword">int</span> pos = inL;    <span class="hljs-keyword">while</span> (pre[preL] != in[pos])    <span class="hljs-comment">//查找根结点</span>        ++pos;    <span class="hljs-keyword">if</span> (pos == inL)         <span class="hljs-comment">// 根节点在中序的最左边，意味着没有左子树</span>        (*t)-&gt;left = <span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">int</span> n = pos-inL;    <span class="hljs-comment">// 递归地构建左子树</span>        createTree(pre, in, preL+<span class="hljs-number">1</span>, preL+n, inL, inL+n<span class="hljs-number">-1</span>, &amp;((*t)-&gt;left));    &#125;    <span class="hljs-keyword">if</span> (pos == inR)        (*t)-&gt;right = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">// 根节点在中序的最右边，意味着没有右子树</span>    <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">int</span> n = pos-inL;    <span class="hljs-comment">//递归地构建右子树</span>        createTree(pre, in, preL+n+<span class="hljs-number">1</span>, preR, inL+n+<span class="hljs-number">1</span>, inR, &amp;((*t)-&gt;right));    &#125;&#125;</code></pre><h2 id="非递归算法"><a href="#非递归算法" class="headerlink" title="非递归算法"></a>非递归算法</h2><p>思路：<br>利用两个栈，一个存储每个子树的序列，一个存储对应的根结点，每次出栈对子树进行构建。</p><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> &#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">left</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">right</span>;</span>&#125; BTNode, *BTree;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c, <span class="hljs-keyword">char</span> all[], <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;    <span class="hljs-keyword">int</span> index = start;    <span class="hljs-keyword">for</span> (; index &lt;= end; ++index)        <span class="hljs-keyword">if</span> (all[index] == c)            <span class="hljs-keyword">return</span> index;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-comment">/* nonrecursive */</span><span class="hljs-function">BTree <span class="hljs-title">reConstructBinaryTree</span><span class="hljs-params">(<span class="hljs-keyword">char</span> pre[], <span class="hljs-keyword">char</span> in[], <span class="hljs-keyword">int</span> n)</span> </span>&#123; <span class="hljs-comment">//n是结点个数</span>    <span class="hljs-keyword">int</span> ranges[<span class="hljs-number">200</span>], rtop = <span class="hljs-number">-1</span>;    BTNode *head[<span class="hljs-number">200</span>];    <span class="hljs-keyword">int</span> htop = <span class="hljs-number">-1</span>;    BTNode *cur = <span class="hljs-literal">NULL</span>;      <span class="hljs-comment">//用于保存当前的根</span>    ranges[++rtop] = <span class="hljs-number">0</span>;     <span class="hljs-comment">//子树的中序范围</span>    ranges[++rtop] = n<span class="hljs-number">-1</span>;    ranges[++rtop] = <span class="hljs-number">0</span>;     <span class="hljs-comment">//子树的前序范围</span>    ranges[++rtop] = n<span class="hljs-number">-1</span>;    <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;    BTree root = (BTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));    head[++htop] = root;    <span class="hljs-keyword">while</span> (count) &#123;     <span class="hljs-comment">// 循环至所有结点处理完</span>        --count;        cur = head[htop--];        <span class="hljs-keyword">int</span> pEnd = ranges[rtop--], pStart = ranges[rtop--];        <span class="hljs-keyword">int</span> iEnd = ranges[rtop--], iStart = ranges[rtop--];        cur-&gt;data = pre[pStart];            <span class="hljs-keyword">int</span> index = find(pre[pStart], in, iStart, iEnd);        <span class="hljs-keyword">int</span> lenL = index - iStart;        <span class="hljs-keyword">if</span> (lenL == <span class="hljs-number">0</span>) &#123;            cur-&gt;left = <span class="hljs-literal">NULL</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            ++count;            ranges[++rtop] = iStart;        <span class="hljs-comment">//子树中序范围 进栈</span>            ranges[++rtop] = index - <span class="hljs-number">1</span>;            ranges[++rtop] = pStart + <span class="hljs-number">1</span>;            ranges[++rtop] = pStart + lenL;            cur-&gt;left = (BTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));            head[++htop] = cur-&gt;left;        &#125;        <span class="hljs-keyword">int</span> lenR = iEnd - index;        <span class="hljs-keyword">if</span> (lenR == <span class="hljs-number">0</span>) &#123;            cur-&gt;right = <span class="hljs-literal">NULL</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            ++count;            ranges[++rtop] = index + <span class="hljs-number">1</span>;            ranges[++rtop] = iEnd;            ranges[++rtop] = pStart + lenL + <span class="hljs-number">1</span>;            ranges[++rtop] = pEnd;            cur-&gt;right = (BTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));            head[++htop] = cur-&gt;right;        &#125;    &#125;    <span class="hljs-keyword">return</span> root;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode-37 解数独</title>
    <link href="/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/"/>
    <url>/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><strong>Hard</strong></p><blockquote><p>编写一个程序，通过已填充的空格来解决数独问题。<br>一个数独的解法需<strong>遵循如下规则</strong>：  </p><ol><li>数字 1-9 在每一行只能出现一次。</li><li>数字 1-9 在每一列只能出现一次。  </li><li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。   </li></ol></blockquote><blockquote><p>空白格用 ‘.’ 表示。</p></blockquote><div align="center"><p><img src="/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/1.png" alt="图片1" title="图片1">    </p><a id="more"></a></div><p><a href="https://leetcode-cn.com/problems/sudoku-solver/" title="题目链接">题目链接</a>  </p><blockquote><p>一个数独。  </p></blockquote><div align="center"><p><img src="/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/2.png" alt="图片1" title="图片2"> </p></div><blockquote><p>答案被标成红色。</p></blockquote><p><strong>Note</strong></p><ul><li>给定的数独序列只包含数字 1-9 和字符 ‘.’ 。</li><li>你可以假设给定的数独只有唯一解。</li><li>给定数独永远是 9x9 形式的。  </li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="我的解法："><a href="#我的解法：" class="headerlink" title="我的解法："></a>我的解法：</h2><p>使用set记录每行、每列、每块的值，防止重复。用dfs进行搜索，修改每个’.’为数字，当没有填满且无法继续填时退回，把数字改回’.’，直到填满。</p><h3 id="Bug-amp-改进"><a href="#Bug-amp-改进" class="headerlink" title="Bug&amp;改进"></a>Bug&amp;改进</h3><h4 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h4><p>dfs中双层循环，j忘记初始化，导致进入内层循环为8时，不会更新为0，导致无法继续搜索。</p><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>可以不通过’.’的个数来确定是否填满。记录下所有点的位置，就不需要进行双层循环遍历。</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt; vx, vy;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&gt; vs;    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;    <span class="hljs-keyword">bool</span> flag;    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is</span><span class="hljs-params">(<span class="hljs-keyword">char</span> num, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;        <span class="hljs-keyword">if</span> (vx[i].find(num) == vx[i].end() &amp;&amp; vy[j].find(num) == vy[j].end() &amp;&amp; vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].find(num) == vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].end())            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> time)</span> </span>&#123;        <span class="hljs-keyword">if</span> (time == cnt)            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">for</span> (; i &lt; <span class="hljs-number">9</span>; ++i) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>  j = <span class="hljs-number">0</span>;  j &lt; <span class="hljs-number">9</span>; ++j) &#123;                <span class="hljs-keyword">if</span> (board[i][j] != <span class="hljs-string">&#x27;.&#x27;</span>)                    <span class="hljs-keyword">continue</span>;                flag = <span class="hljs-literal">false</span>;                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">9</span>; ++k) &#123;                    <span class="hljs-keyword">if</span> (is(k+<span class="hljs-string">&#x27;0&#x27;</span>, i, j)) &#123;                        flag = <span class="hljs-literal">true</span>;                        board[i][j] = k+<span class="hljs-string">&#x27;0&#x27;</span>;                        vx[i].insert(k+<span class="hljs-string">&#x27;0&#x27;</span>);  vy[j].insert(k+<span class="hljs-string">&#x27;0&#x27;</span>); vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].insert(k+<span class="hljs-string">&#x27;0&#x27;</span>);                        <span class="hljs-keyword">int</span> m;                        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">8</span>) &#123;                            m = i+<span class="hljs-number">1</span>;                        &#125;                         <span class="hljs-keyword">if</span> (dfs(board, m, time+<span class="hljs-number">1</span>))                            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;                        <span class="hljs-keyword">else</span> &#123;                            board[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;                            vx[i].erase(k+<span class="hljs-string">&#x27;0&#x27;</span>);  vy[j].erase(k+<span class="hljs-string">&#x27;0&#x27;</span>); vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].erase(k+<span class="hljs-string">&#x27;0&#x27;</span>);                        &#125;                    &#125;                &#125;                <span class="hljs-keyword">if</span> (!flag)                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;           &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solveSudoku</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;        vs.resize(<span class="hljs-number">3</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i)            vs[i].resize(<span class="hljs-number">3</span>);        vx.resize(<span class="hljs-number">9</span>);        vy.resize(<span class="hljs-number">9</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; board.size(); ++i) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; board[<span class="hljs-number">0</span>].size(); ++j) &#123;                <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>)                    ++cnt;                <span class="hljs-keyword">else</span> &#123;                    vx[i].insert(board[i][j]);                    vy[j].insert(board[i][j]);                    vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].insert(board[i][j]);                &#125;            &#125;        &#125;        dfs(board, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    &#125;&#125;;</code></pre><h2 id="题解1："><a href="#题解1：" class="headerlink" title="题解1："></a>题解1：</h2><p>按行优先进行遍历每个空白，通过递归+回溯枚举所有可能的填法。当递归到最后一个空白仍然没有冲突，则说明找到了答案；如果递归到某一个空白发生冲突，则进行回溯。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><ul><li>通过[i/3][j/3]定位块的位置。</li><li>用 pair&lt;int, int&gt; 记录空白的行和列，再对它进行按行遍历。</li><li>通过三个 bool 数组 记录数字是否可用。</li><li>回溯后要将 bool 数组的值 还原。  </li></ul><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">private</span>:    <span class="hljs-keyword">bool</span> line[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>];    <span class="hljs-keyword">bool</span> column[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>];    <span class="hljs-keyword">bool</span> block[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">9</span>];    <span class="hljs-keyword">bool</span> valid;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; spaces;<span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-keyword">int</span> pos)</span> </span>&#123;        <span class="hljs-keyword">if</span> (pos == spaces.size()) &#123;            valid = <span class="hljs-literal">true</span>;            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">auto</span> [i, j] = spaces[pos];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> digit = <span class="hljs-number">0</span>; digit &lt; <span class="hljs-number">9</span> &amp;&amp; !valid; ++digit) &#123;            <span class="hljs-keyword">if</span> (!line[i][digit] &amp;&amp; !column[j][digit] &amp;&amp; !block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit]) &#123;                line[i][digit] = column[j][digit] = block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit] = <span class="hljs-literal">true</span>;                board[i][j] = digit + <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-number">1</span>;                dfs(board, pos + <span class="hljs-number">1</span>);                line[i][digit] = column[j][digit] = block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit] = <span class="hljs-literal">false</span>;            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solveSudoku</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;        <span class="hljs-built_in">memset</span>(line, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(line));        <span class="hljs-built_in">memset</span>(column, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(column));        <span class="hljs-built_in">memset</span>(block, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(block));        valid = <span class="hljs-literal">false</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; ++i) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; ++j) &#123;                <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;                    spaces.emplace_back(i, j);                &#125;                <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">int</span> digit = board[i][j] - <span class="hljs-string">&#x27;0&#x27;</span> - <span class="hljs-number">1</span>;                    line[i][digit] = column[j][digit] = block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit] = <span class="hljs-literal">true</span>;                &#125;            &#125;        &#125;        dfs(board, <span class="hljs-number">0</span>);    &#125;&#125;;</code></pre><h2 id="题解2："><a href="#题解2：" class="headerlink" title="题解2："></a>题解2：</h2>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>回溯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/16/hello-world/"/>
    <url>/2020/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
