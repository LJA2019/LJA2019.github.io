<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>博客说明</title>
    <link href="/2050/12/31/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    <url>/2050/12/31/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p><strong>主要是更新学习笔记和一些感想。。。。</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>leetcode-37 解数独</title>
    <link href="/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/"/>
    <url>/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><strong>Hard</strong></p><blockquote><p>编写一个程序，通过已填充的空格来解决数独问题。<br>一个数独的解法需<strong>遵循如下规则</strong>：  </p><ol><li>数字 1-9 在每一行只能出现一次。</li><li>数字 1-9 在每一列只能出现一次。  </li><li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。   </li></ol></blockquote><blockquote><p>空白格用 ‘.’ 表示。</p></blockquote><div align="center"><p><img src="/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/1.png" alt="图片1" title="图片1">    </p><a id="more"></a><div align="left"><p><a href="https://leetcode-cn.com/problems/sudoku-solver/" title="题目链接">题目链接</a>  </p><blockquote><p>一个数独。  </p></blockquote><div align="center"><p><img src="/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/2.png" alt="图片1" title="图片2"> </p><div align="left"><blockquote><p>答案被标成红色。</p></blockquote><p><strong>Note</strong></p><ul><li>给定的数独序列只包含数字 1-9 和字符 ‘.’ 。</li><li>你可以假设给定的数独只有唯一解。</li><li>给定数独永远是 9x9 形式的。  </li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="我的解法："><a href="#我的解法：" class="headerlink" title="我的解法："></a>我的解法：</h2><p>使用set记录每行、每列、每块的值，防止重复。用dfs进行搜索，修改每个’.’为数字，当没有填满且无法继续填时退回，把数字改回’.’，直到填满。</p><h3 id="Bug-amp-改进"><a href="#Bug-amp-改进" class="headerlink" title="Bug&amp;改进"></a>Bug&amp;改进</h3><h4 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h4><p>dfs中双层循环，j忘记初始化，导致进入内层循环为8时，不会更新为0，导致无法继续搜索。</p><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>可以不通过’.’的个数来确定是否填满。记录下所有点的位置，就不需要进行双层循环遍历。</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt; vx, vy;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&gt; vs;    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;    <span class="hljs-keyword">bool</span> flag;    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is</span><span class="hljs-params">(<span class="hljs-keyword">char</span> num, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;        <span class="hljs-keyword">if</span> (vx[i].find(num) == vx[i].end() &amp;&amp; vy[j].find(num) == vy[j].end() &amp;&amp; vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].find(num) == vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].end())            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> time)</span> </span>&#123;        <span class="hljs-keyword">if</span> (time == cnt)            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">for</span> (; i &lt; <span class="hljs-number">9</span>; ++i) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>  j = <span class="hljs-number">0</span>;  j &lt; <span class="hljs-number">9</span>; ++j) &#123;                <span class="hljs-keyword">if</span> (board[i][j] != <span class="hljs-string">&#x27;.&#x27;</span>)                    <span class="hljs-keyword">continue</span>;                flag = <span class="hljs-literal">false</span>;                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">9</span>; ++k) &#123;                    <span class="hljs-keyword">if</span> (is(k+<span class="hljs-string">&#x27;0&#x27;</span>, i, j)) &#123;                        flag = <span class="hljs-literal">true</span>;                        board[i][j] = k+<span class="hljs-string">&#x27;0&#x27;</span>;                        vx[i].insert(k+<span class="hljs-string">&#x27;0&#x27;</span>);  vy[j].insert(k+<span class="hljs-string">&#x27;0&#x27;</span>); vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].insert(k+<span class="hljs-string">&#x27;0&#x27;</span>);                        <span class="hljs-keyword">int</span> m;                        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">8</span>) &#123;                            m = i+<span class="hljs-number">1</span>;                        &#125;                         <span class="hljs-keyword">if</span> (dfs(board, m, time+<span class="hljs-number">1</span>))                            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;                        <span class="hljs-keyword">else</span> &#123;                            board[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;                            vx[i].erase(k+<span class="hljs-string">&#x27;0&#x27;</span>);  vy[j].erase(k+<span class="hljs-string">&#x27;0&#x27;</span>); vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].erase(k+<span class="hljs-string">&#x27;0&#x27;</span>);                        &#125;                    &#125;                &#125;                <span class="hljs-keyword">if</span> (!flag)                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;           &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solveSudoku</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;        vs.resize(<span class="hljs-number">3</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i)            vs[i].resize(<span class="hljs-number">3</span>);        vx.resize(<span class="hljs-number">9</span>);        vy.resize(<span class="hljs-number">9</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; board.size(); ++i) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; board[<span class="hljs-number">0</span>].size(); ++j) &#123;                <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>)                    ++cnt;                <span class="hljs-keyword">else</span> &#123;                    vx[i].insert(board[i][j]);                    vy[j].insert(board[i][j]);                    vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].insert(board[i][j]);                &#125;            &#125;        &#125;        dfs(board, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    &#125;&#125;;</code></pre><h2 id="题解1："><a href="#题解1：" class="headerlink" title="题解1："></a>题解1：</h2><p>按行优先进行遍历每个空白，通过递归+回溯枚举所有可能的填法。当递归到最后一个空白仍然没有冲突，则说明找到了答案；如果递归到某一个空白发生冲突，则进行回溯。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><ul><li>通过[i/3][j/3]定位块的位置。</li><li>用 pair&lt;int, int&gt; 记录空白的行和列，再对它进行按行遍历。</li><li>通过三个 bool 数组 记录数字是否可用。</li><li>回溯后要将 bool 数组的值 还原。  </li></ul><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">private</span>:    <span class="hljs-keyword">bool</span> line[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>];    <span class="hljs-keyword">bool</span> column[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>];    <span class="hljs-keyword">bool</span> block[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">9</span>];    <span class="hljs-keyword">bool</span> valid;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; spaces;<span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-keyword">int</span> pos)</span> </span>&#123;        <span class="hljs-keyword">if</span> (pos == spaces.size()) &#123;            valid = <span class="hljs-literal">true</span>;            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">auto</span> [i, j] = spaces[pos];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> digit = <span class="hljs-number">0</span>; digit &lt; <span class="hljs-number">9</span> &amp;&amp; !valid; ++digit) &#123;            <span class="hljs-keyword">if</span> (!line[i][digit] &amp;&amp; !column[j][digit] &amp;&amp; !block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit]) &#123;                line[i][digit] = column[j][digit] = block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit] = <span class="hljs-literal">true</span>;                board[i][j] = digit + <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-number">1</span>;                dfs(board, pos + <span class="hljs-number">1</span>);                line[i][digit] = column[j][digit] = block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit] = <span class="hljs-literal">false</span>;            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solveSudoku</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;        <span class="hljs-built_in">memset</span>(line, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(line));        <span class="hljs-built_in">memset</span>(column, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(column));        <span class="hljs-built_in">memset</span>(block, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(block));        valid = <span class="hljs-literal">false</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; ++i) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; ++j) &#123;                <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;                    spaces.emplace_back(i, j);                &#125;                <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">int</span> digit = board[i][j] - <span class="hljs-string">&#x27;0&#x27;</span> - <span class="hljs-number">1</span>;                    line[i][digit] = column[j][digit] = block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit] = <span class="hljs-literal">true</span>;                &#125;            &#125;        &#125;        dfs(board, <span class="hljs-number">0</span>);    &#125;&#125;;</code></pre><h2 id="题解2："><a href="#题解2：" class="headerlink" title="题解2："></a>题解2：</h2></div></div></div></div>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>回溯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/16/hello-world/"/>
    <url>/2020/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
