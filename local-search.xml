<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>博客说明</title>
    <link href="/2050/12/31/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    <url>/2050/12/31/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<p><strong>主要是更新学习笔记和一些感想。。。。</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>线索二叉树详解</title>
    <link href="/2020/10/14/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/10/14/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么需要遍历"><a href="#为什么需要遍历" class="headerlink" title="为什么需要遍历"></a>为什么需要遍历</h1><p> <strong>遍历</strong>本质上是将一个复杂的非线性结构转换为线性结构，使每一个结点都有了唯一的前驱和后继（第一个结点无前驱，最后一个结点无后继）。</p> <a id="more"></a><h1 id="什么是线索二叉树"><a href="#什么是线索二叉树" class="headerlink" title="什么是线索二叉树"></a>什么是线索二叉树</h1><p>对于具有n个结点的二叉树，在二叉链式存储结构中有n+1个空链域，利用这些空链域存放在某种遍历次序下该结点的前驱结点和后继结点，这些指针称为线索，加上线索的二叉树称为线索二叉树。</p><h1 id="线索二叉树的结构"><a href="#线索二叉树的结构" class="headerlink" title="线索二叉树的结构"></a>线索二叉树的结构</h1><p>当结点的左孩子为空，把这个空域的指针改为指向该结点的前驱；当结点的右孩子为空，把这个空域的指针改为指向该结点的后继。显然，需要一个标志位ltag标志该域指向的是左孩子还是前驱，需要一个标志位rtag标志该域指向的是右孩子还是后继。ltag和rtag的作用是区别线索指针和孩子指针。<br><img src="/2020/10/14/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3/1.png" width="70%" height="70%"></p><h1 id="线索二叉树的作用"><a href="#线索二叉树的作用" class="headerlink" title="线索二叉树的作用"></a>线索二叉树的作用</h1><p>对于二叉树的一个结点，查找其左右子女是方便的，其前驱和后继只有在遍历中得到。为了容易找到前驱和后继，有两种方法。一种是在结点结构中增加前向和后向的指针，这种方法增加了存储开销，不可取；更好的方法是利用二叉树的空链域。</p><h1 id="三种线索二叉树及区别"><a href="#三种线索二叉树及区别" class="headerlink" title="三种线索二叉树及区别"></a>三种线索二叉树及区别</h1><h2 id="先序线索二叉树"><a href="#先序线索二叉树" class="headerlink" title="先序线索二叉树"></a>先序线索二叉树</h2><p>在先序线索二叉树中查找结点的后继较容易，而查找结点的前驱要知道其双亲的信息。保存双亲的信息需要使用栈。</p><h2 id="后序线索二叉树"><a href="#后序线索二叉树" class="headerlink" title="后序线索二叉树"></a>后序线索二叉树</h2><p>在后序线索二叉树中查找结点<em>p的前驱：若结点</em>p无左子树，则p-&gt;lchild指向其前驱；否则，若结点<em>p有左子树，当其右子树为空时，其左子树的根（即p-&gt;lrchild）为其后序前驱。当其右子树非空时，其右子树的根（即p-&gt;rchild）为其后序前驱。<br>在后序线索二叉树中查找结点</em>p的后继：若结点<em>p为根，则无后继；若结点</em>p为其双亲的右孩子，则其后继为其双亲；若结点<em>p为其双亲的左孩子，且双亲无右子女，则其后继为其双亲；若结点</em>p为其双亲的左孩子，且双亲有右子女，则结点*p的后继是其双亲的右子树中按后序遍历的第一个结点。所以，求后序线索二叉树中结点的后继要知道其双亲的信息，要使用栈。</p><h2 id="中序线索二叉树"><a href="#中序线索二叉树" class="headerlink" title="中序线索二叉树"></a>中序线索二叉树</h2><p>先序线索二叉树查找结点的前驱，后序线索二叉树查找结点的后继都需要利用到双亲的信息，所以必须用栈保存结点的双亲信息，所以说这两种线索二叉树是不完整的。<br>而中序线索二叉树，查找前驱和后继都不需要使用栈。<br><img src="/2020/10/14/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E8%AF%A6%E8%A7%A3/2.png" width="70%" height="70%"></p><h1 id="线索二叉树的优点"><a href="#线索二叉树的优点" class="headerlink" title="线索二叉树的优点"></a>线索二叉树的优点</h1><p>优点：  </p><ol><li>利用线索二叉树进行中序遍历时，不必采用堆栈处理，速度较一般二叉树的遍历速度快，且节约存储空间；</li></ol><p>缺点：</p><ol><li>结点的插入和删除比较麻烦</li></ol><h1 id="线索二叉树的应用"><a href="#线索二叉树的应用" class="headerlink" title="线索二叉树的应用"></a>线索二叉树的应用</h1><p>当路由器使用CIDR，选择下一跳的时候，或者转发分组的时候，通常会用<strong>最长前缀匹配（最佳匹配）</strong>来得到路由表的一行数据，为了更加有效的查找最长前缀匹配，使用了一种层次的数据结构中，通常使用的数据结构为二叉线索。</p><h1 id="中序线索二叉树相关代码"><a href="#中序线索二叉树相关代码" class="headerlink" title="中序线索二叉树相关代码"></a>中序线索二叉树相关代码</h1><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">trBTNode</span> &#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">trBTNode</span> *<span class="hljs-title">left</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">trBTNode</span> *<span class="hljs-title">right</span>;</span>    <span class="hljs-built_in">_Bool</span> ltag, rtag;&#125; trBTNode, *trBTree;trBTree pre; <span class="hljs-comment">//用于保存前驱</span><span class="hljs-comment">/* 扩展二叉树按前序创建一棵线索二叉树 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createInTree</span><span class="hljs-params">(trBTree *t)</span> </span>&#123;    <span class="hljs-keyword">char</span> ch;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;ch);    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;#&#x27;</span>)        *t = <span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">else</span> &#123;        *t = (trBTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(trBTNode));        (*t)-&gt;data = ch;        (*t)-&gt;ltag = <span class="hljs-number">0</span>;        (*t)-&gt;rtag = <span class="hljs-number">0</span>;        createInTree(&amp;((*t)-&gt;left));        createInTree(&amp;((*t)-&gt;right));    &#125;&#125;<span class="hljs-comment">/* 线索化 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InThreading</span><span class="hljs-params">(trBTree T)</span> </span>&#123;    <span class="hljs-keyword">if</span> (!T)        <span class="hljs-keyword">return</span>;    InThreading(T-&gt;left);    <span class="hljs-keyword">if</span> (T-&gt;left == <span class="hljs-literal">NULL</span>) &#123;        T-&gt;ltag = <span class="hljs-number">1</span>;        T-&gt;left = pre;    &#125;     <span class="hljs-keyword">if</span> (pre-&gt;right == <span class="hljs-literal">NULL</span>) &#123;            <span class="hljs-comment">//最开始的pre是 head， right指向自身</span>        pre-&gt;rtag = <span class="hljs-number">1</span>;        pre-&gt;right = T;    &#125;    pre = T;    InThreading(T-&gt;right);&#125; <span class="hljs-comment">/* 构建线索二叉树，增加头结点 */</span><span class="hljs-function">trBTree <span class="hljs-title">createInThread</span><span class="hljs-params">(trBTree T)</span> </span>&#123;    trBTree head = (trBTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(trBTNode));           <span class="hljs-comment">//创建一个 head结点</span>    head-&gt;ltag = <span class="hljs-number">0</span>;    head-&gt;rtag = <span class="hljs-number">1</span>;    head-&gt;right = head;    <span class="hljs-keyword">if</span> (!T)        head-&gt;left = head;    <span class="hljs-keyword">else</span> &#123;        head-&gt;left = T;        pre = head;        InThreading(T);        pre-&gt;right = head;          <span class="hljs-comment">//最后一个结点没有后继，它的 right指针 指向  head</span>        pre-&gt;rtag = <span class="hljs-number">1</span>;        head-&gt;right = pre;          <span class="hljs-comment">//  head  的 right 指向 最后一个 结点</span>    &#125;    <span class="hljs-keyword">return</span> head;        <span class="hljs-comment">// head的left指向二叉树的根结点，head的right指向中序遍历的最后一个结点</span>&#125;<span class="hljs-comment">/* 遍历线索二叉树，时间复杂度O(n) */</span><span class="hljs-function"><span class="hljs-built_in">_Bool</span> <span class="hljs-title">InOrderTraverseThr</span><span class="hljs-params">(trBTree head)</span> </span>&#123;    trBTNode *p = head-&gt;left;   <span class="hljs-comment">//  从树根开始遍历</span>    <span class="hljs-keyword">while</span> (p != head) &#123;        <span class="hljs-keyword">while</span> (p-&gt;ltag == <span class="hljs-number">0</span>) &#123;            p = p-&gt;left;        &#125;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, p-&gt;data);        <span class="hljs-keyword">while</span> (p-&gt;rtag == <span class="hljs-number">1</span> &amp;&amp; p-&gt;right != head) &#123;            p = p-&gt;right;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, p-&gt;data);        &#125;        p = p-&gt;right;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">/* 寻找结点的前驱 */</span><span class="hljs-function">trBTNode* <span class="hljs-title">InOrderPre</span><span class="hljs-params">(trBTNode *p)</span> </span>&#123;    <span class="hljs-keyword">if</span> (p-&gt;ltag == <span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span> p-&gt;left;    p = p-&gt;left;        <span class="hljs-comment">//  查找左子树最后一个结点</span>    <span class="hljs-keyword">while</span> (p-&gt;rtag == <span class="hljs-number">0</span>) &#123;        p = p-&gt;right;    &#125;    <span class="hljs-keyword">return</span> p;&#125;<span class="hljs-comment">/* 寻找结点的后继 */</span><span class="hljs-function">trBTNode* <span class="hljs-title">InOrderNext</span><span class="hljs-params">(trBTNode *p)</span> </span>&#123;    <span class="hljs-keyword">if</span> (p-&gt;rtag == <span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span> p-&gt;right;    p = p-&gt;right;    <span class="hljs-keyword">while</span> (p-&gt;ltag == <span class="hljs-number">0</span>) &#123;        p = p-&gt;left;    &#125;    <span class="hljs-keyword">return</span> p;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>根据遍历序列重建二叉树</title>
    <link href="/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树的两个性质"><a href="#二叉树的两个性质" class="headerlink" title="二叉树的两个性质"></a>二叉树的两个性质</h1><ol><li>已知前序遍历序列和中序遍历序列，可以唯一确定一棵二叉树</li><li>已知后序遍历序列和中序遍历序列，可以唯一确定一棵二叉树  </li></ol><p><strong>注意：</strong> 由前序和后序无法确定一棵二叉树。因为只能确定根，而无法确定左右子树。  </p><a id="more"></a><p>如下图所示，前序序列是 <em>ABC</em>，后序序列是 <em>CBA</em>，可以确定A一定是根结点，但是无法确定哪个结点是左子树，哪个是右子树。<br><img src="/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/1.png" width="60%" height="60%"></p><h1 id="根据前序和中序构建一个二叉树的例子"><a href="#根据前序和中序构建一个二叉树的例子" class="headerlink" title="根据前序和中序构建一个二叉树的例子"></a>根据前序和中序构建一个二叉树的例子</h1><p>已知一棵二叉树的前序遍历为 <em>ABCDEF</em>，中序遍历为 <em>CBAEDF</em>，怎样来确定这棵二叉树。<br>步骤：  </p><ol><li>根据前序遍历，可知A是根结点；</li><li>根据中序遍历，可知CB和EDF分别是根A的左右子树；</li><li>对于CB，根据前序遍历确定B是左子树的根节点，根据中序遍历确定C是B的左孩子；</li><li>对于EDF，根据前序遍历确定D是右子树的根节点，根据中序遍历确定EF分别为D的左右孩子。</li></ol><div align="center"><img src="/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/2.png" width="40%" height="40%"></div><div align="center"><img src="/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/3.png" width="30%" height="30%"></div><div align="center"><img src="/2020/10/09/%E6%A0%B9%E6%8D%AE%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/4.png" width="30%" height="30%"></div><h1 id="根据前序和中序构建二叉树的代码实现"><a href="#根据前序和中序构建二叉树的代码实现" class="headerlink" title="根据前序和中序构建二叉树的代码实现"></a>根据前序和中序构建二叉树的代码实现</h1><h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><p>思路：<br>在前序序列中确定二叉树的根节点，然后通过确定左右子树的根节点的方式递归地构建左右子树。要注意递归边界。  </p><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> &#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">left</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">right</span>;</span>&#125; BTNode, *BTree;<span class="hljs-comment">/* 根据前序遍历次序和中序遍历次序构造一棵二叉树 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createTree</span><span class="hljs-params">(<span class="hljs-keyword">char</span> pre[], <span class="hljs-keyword">char</span> in[], <span class="hljs-keyword">int</span> preL, <span class="hljs-keyword">int</span> preR, <span class="hljs-keyword">int</span> inL, <span class="hljs-keyword">int</span> inR, BTree *t)</span> </span>&#123;    <span class="hljs-comment">// pre[] in[] 分别为前序和中序序列， preL和preR表示子树对应的前序序列的端点，inL和inR同理</span>    <span class="hljs-keyword">if</span> (preL &gt; preR)  <span class="hljs-comment">//递归边界</span>        <span class="hljs-keyword">return</span>;    *t = (BTNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));    (*t)-&gt;data = pre[preL];    <span class="hljs-keyword">int</span> pos = inL;    <span class="hljs-keyword">while</span> (pre[preL] != in[pos])    <span class="hljs-comment">//查找根结点</span>        ++pos;    <span class="hljs-keyword">if</span> (pos == inL)         <span class="hljs-comment">// 根节点在中序的最左边，意味着没有左子树</span>        (*t)-&gt;left = <span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">int</span> n = pos-inL;    <span class="hljs-comment">// 递归地构建左子树</span>        createTree(pre, in, preL+<span class="hljs-number">1</span>, preL+n, inL, inL+n<span class="hljs-number">-1</span>, &amp;((*t)-&gt;left));    &#125;    <span class="hljs-keyword">if</span> (pos == inR)        (*t)-&gt;right = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">// 根节点在中序的最右边，意味着没有右子树</span>    <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">int</span> n = pos-inL;    <span class="hljs-comment">//递归地构建右子树</span>        createTree(pre, in, preL+n+<span class="hljs-number">1</span>, preR, inL+n+<span class="hljs-number">1</span>, inR, &amp;((*t)-&gt;right));    &#125;&#125;</code></pre><h2 id="非递归算法"><a href="#非递归算法" class="headerlink" title="非递归算法"></a>非递归算法</h2><p>思路：<br>利用两个栈，一个存储每个子树的序列，一个存储对应的根结点，每次出栈对子树进行构建。</p><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> &#123;</span>    ElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">left</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">right</span>;</span>&#125; BTNode, *BTree;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c, <span class="hljs-keyword">char</span> all[], <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;    <span class="hljs-keyword">int</span> index = start;    <span class="hljs-keyword">for</span> (; index &lt;= end; ++index)        <span class="hljs-keyword">if</span> (all[index] == c)            <span class="hljs-keyword">return</span> index;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-comment">/* nonrecursive */</span><span class="hljs-function">BTree <span class="hljs-title">reConstructBinaryTree</span><span class="hljs-params">(<span class="hljs-keyword">char</span> pre[], <span class="hljs-keyword">char</span> in[], <span class="hljs-keyword">int</span> n)</span> </span>&#123; <span class="hljs-comment">//n是结点个数</span>    <span class="hljs-keyword">int</span> ranges[<span class="hljs-number">200</span>], rtop = <span class="hljs-number">-1</span>;    BTNode *head[<span class="hljs-number">200</span>];    <span class="hljs-keyword">int</span> htop = <span class="hljs-number">-1</span>;    BTNode *cur = <span class="hljs-literal">NULL</span>;      <span class="hljs-comment">//用于保存当前的根</span>    ranges[++rtop] = <span class="hljs-number">0</span>;     <span class="hljs-comment">//子树的中序范围</span>    ranges[++rtop] = n<span class="hljs-number">-1</span>;    ranges[++rtop] = <span class="hljs-number">0</span>;     <span class="hljs-comment">//子树的前序范围</span>    ranges[++rtop] = n<span class="hljs-number">-1</span>;    <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;    BTree root = (BTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));    head[++htop] = root;    <span class="hljs-keyword">while</span> (count) &#123;     <span class="hljs-comment">// 循环至所有结点处理完</span>        --count;        cur = head[htop--];        <span class="hljs-keyword">int</span> pEnd = ranges[rtop--], pStart = ranges[rtop--];        <span class="hljs-keyword">int</span> iEnd = ranges[rtop--], iStart = ranges[rtop--];        cur-&gt;data = pre[pStart];            <span class="hljs-keyword">int</span> index = find(pre[pStart], in, iStart, iEnd);        <span class="hljs-keyword">int</span> lenL = index - iStart;        <span class="hljs-keyword">if</span> (lenL == <span class="hljs-number">0</span>) &#123;            cur-&gt;left = <span class="hljs-literal">NULL</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            ++count;            ranges[++rtop] = iStart;        <span class="hljs-comment">//子树中序范围 进栈</span>            ranges[++rtop] = index - <span class="hljs-number">1</span>;            ranges[++rtop] = pStart + <span class="hljs-number">1</span>;            ranges[++rtop] = pStart + lenL;            cur-&gt;left = (BTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));            head[++htop] = cur-&gt;left;        &#125;        <span class="hljs-keyword">int</span> lenR = iEnd - index;        <span class="hljs-keyword">if</span> (lenR == <span class="hljs-number">0</span>) &#123;            cur-&gt;right = <span class="hljs-literal">NULL</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            ++count;            ranges[++rtop] = index + <span class="hljs-number">1</span>;            ranges[++rtop] = iEnd;            ranges[++rtop] = pStart + lenL + <span class="hljs-number">1</span>;            ranges[++rtop] = pEnd;            cur-&gt;right = (BTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));            head[++htop] = cur-&gt;right;        &#125;    &#125;    <span class="hljs-keyword">return</span> root;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode-37 解数独</title>
    <link href="/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/"/>
    <url>/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><strong>Hard</strong></p><blockquote><p>编写一个程序，通过已填充的空格来解决数独问题。<br>一个数独的解法需<strong>遵循如下规则</strong>：  </p><ol><li>数字 1-9 在每一行只能出现一次。</li><li>数字 1-9 在每一列只能出现一次。  </li><li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。   </li></ol></blockquote><blockquote><p>空白格用 ‘.’ 表示。</p></blockquote><div align="center"><p><img src="/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/1.png" alt="图片1" title="图片1">    </p><a id="more"></a></div><p><a href="https://leetcode-cn.com/problems/sudoku-solver/" title="题目链接">题目链接</a>  </p><blockquote><p>一个数独。  </p></blockquote><div align="center"><p><img src="/2020/09/16/leetcode-37-%E8%A7%A3%E6%95%B0%E7%8B%AC/2.png" alt="图片1" title="图片2"> </p></div><blockquote><p>答案被标成红色。</p></blockquote><p><strong>Note</strong></p><ul><li>给定的数独序列只包含数字 1-9 和字符 ‘.’ 。</li><li>你可以假设给定的数独只有唯一解。</li><li>给定数独永远是 9x9 形式的。  </li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="我的解法："><a href="#我的解法：" class="headerlink" title="我的解法："></a>我的解法：</h2><p>使用set记录每行、每列、每块的值，防止重复。用dfs进行搜索，修改每个’.’为数字，当没有填满且无法继续填时退回，把数字改回’.’，直到填满。</p><h3 id="Bug-amp-改进"><a href="#Bug-amp-改进" class="headerlink" title="Bug&amp;改进"></a>Bug&amp;改进</h3><h4 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h4><p>dfs中双层循环，j忘记初始化，导致进入内层循环为8时，不会更新为0，导致无法继续搜索。</p><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>可以不通过’.’的个数来确定是否填满。记录下所有点的位置，就不需要进行双层循环遍历。</p><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt; vx, vy;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&gt; vs;    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;    <span class="hljs-keyword">bool</span> flag;    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is</span><span class="hljs-params">(<span class="hljs-keyword">char</span> num, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;        <span class="hljs-keyword">if</span> (vx[i].find(num) == vx[i].end() &amp;&amp; vy[j].find(num) == vy[j].end() &amp;&amp; vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].find(num) == vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].end())            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> time)</span> </span>&#123;        <span class="hljs-keyword">if</span> (time == cnt)            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">for</span> (; i &lt; <span class="hljs-number">9</span>; ++i) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>  j = <span class="hljs-number">0</span>;  j &lt; <span class="hljs-number">9</span>; ++j) &#123;                <span class="hljs-keyword">if</span> (board[i][j] != <span class="hljs-string">&#x27;.&#x27;</span>)                    <span class="hljs-keyword">continue</span>;                flag = <span class="hljs-literal">false</span>;                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">9</span>; ++k) &#123;                    <span class="hljs-keyword">if</span> (is(k+<span class="hljs-string">&#x27;0&#x27;</span>, i, j)) &#123;                        flag = <span class="hljs-literal">true</span>;                        board[i][j] = k+<span class="hljs-string">&#x27;0&#x27;</span>;                        vx[i].insert(k+<span class="hljs-string">&#x27;0&#x27;</span>);  vy[j].insert(k+<span class="hljs-string">&#x27;0&#x27;</span>); vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].insert(k+<span class="hljs-string">&#x27;0&#x27;</span>);                        <span class="hljs-keyword">int</span> m;                        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">8</span>) &#123;                            m = i+<span class="hljs-number">1</span>;                        &#125;                         <span class="hljs-keyword">if</span> (dfs(board, m, time+<span class="hljs-number">1</span>))                            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;                        <span class="hljs-keyword">else</span> &#123;                            board[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;                            vx[i].erase(k+<span class="hljs-string">&#x27;0&#x27;</span>);  vy[j].erase(k+<span class="hljs-string">&#x27;0&#x27;</span>); vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].erase(k+<span class="hljs-string">&#x27;0&#x27;</span>);                        &#125;                    &#125;                &#125;                <span class="hljs-keyword">if</span> (!flag)                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;           &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solveSudoku</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;        vs.resize(<span class="hljs-number">3</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i)            vs[i].resize(<span class="hljs-number">3</span>);        vx.resize(<span class="hljs-number">9</span>);        vy.resize(<span class="hljs-number">9</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; board.size(); ++i) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; board[<span class="hljs-number">0</span>].size(); ++j) &#123;                <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>)                    ++cnt;                <span class="hljs-keyword">else</span> &#123;                    vx[i].insert(board[i][j]);                    vy[j].insert(board[i][j]);                    vs[i/<span class="hljs-number">3</span>][j/<span class="hljs-number">3</span>].insert(board[i][j]);                &#125;            &#125;        &#125;        dfs(board, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    &#125;&#125;;</code></pre><h2 id="题解1："><a href="#题解1：" class="headerlink" title="题解1："></a>题解1：</h2><p>按行优先进行遍历每个空白，通过递归+回溯枚举所有可能的填法。当递归到最后一个空白仍然没有冲突，则说明找到了答案；如果递归到某一个空白发生冲突，则进行回溯。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><ul><li>通过[i/3][j/3]定位块的位置。</li><li>用 pair&lt;int, int&gt; 记录空白的行和列，再对它进行按行遍历。</li><li>通过三个 bool 数组 记录数字是否可用。</li><li>回溯后要将 bool 数组的值 还原。  </li></ul><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">private</span>:    <span class="hljs-keyword">bool</span> line[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>];    <span class="hljs-keyword">bool</span> column[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>];    <span class="hljs-keyword">bool</span> block[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>][<span class="hljs-number">9</span>];    <span class="hljs-keyword">bool</span> valid;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;&gt; spaces;<span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-keyword">int</span> pos)</span> </span>&#123;        <span class="hljs-keyword">if</span> (pos == spaces.size()) &#123;            valid = <span class="hljs-literal">true</span>;            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">auto</span> [i, j] = spaces[pos];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> digit = <span class="hljs-number">0</span>; digit &lt; <span class="hljs-number">9</span> &amp;&amp; !valid; ++digit) &#123;            <span class="hljs-keyword">if</span> (!line[i][digit] &amp;&amp; !column[j][digit] &amp;&amp; !block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit]) &#123;                line[i][digit] = column[j][digit] = block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit] = <span class="hljs-literal">true</span>;                board[i][j] = digit + <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-number">1</span>;                dfs(board, pos + <span class="hljs-number">1</span>);                line[i][digit] = column[j][digit] = block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit] = <span class="hljs-literal">false</span>;            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">solveSudoku</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;        <span class="hljs-built_in">memset</span>(line, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(line));        <span class="hljs-built_in">memset</span>(column, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(column));        <span class="hljs-built_in">memset</span>(block, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span>(block));        valid = <span class="hljs-literal">false</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; ++i) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span>; ++j) &#123;                <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;                    spaces.emplace_back(i, j);                &#125;                <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">int</span> digit = board[i][j] - <span class="hljs-string">&#x27;0&#x27;</span> - <span class="hljs-number">1</span>;                    line[i][digit] = column[j][digit] = block[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][digit] = <span class="hljs-literal">true</span>;                &#125;            &#125;        &#125;        dfs(board, <span class="hljs-number">0</span>);    &#125;&#125;;</code></pre><h2 id="题解2："><a href="#题解2：" class="headerlink" title="题解2："></a>题解2：</h2>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>回溯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/16/hello-world/"/>
    <url>/2020/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
